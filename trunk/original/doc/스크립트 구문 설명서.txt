
//    kk  ""tt""  "";;    """"JJ;;kkJJ  JJtt""    ""tt""  ;;tt""""tt    ""tt""   
//   JJ  kk""tt;;JJ      ttkk    ""tt    ;;;;ttJJ;;  ""ttkk;;"";;;;ttkk;;  ;;kk  
//  "";;  ""  kk  kk  tt  ttww    ZZ;;  ww    RR  ;;JJ  JJJJ  tt    RR  ;;JJ  JJ 
//  JJ      """";;""  kk  ttkk  ;;kk    ZZ    ww  ;;""  kk""  ww    kk;;kk""  JJ 
//  kk      JJ  kk    ww  ttkk  JJJJ  ;;ww  ""JJ  ;;tt""RR    ZZ  ;;ZZJJ      kk 
//  kk  ;;  "";;JJ        JJtt  JJJJ  ""kk  JJ""  ww""""ww    ww  ""JJ  ZZ    kk 
//  JJ  JJ  ;;JJ""  "";;  ww;;  kkJJ  JJ""  kk;;  ww  ;;ww  ""JJ  ww;;  ww  ;;tt 
//;;""  RR    RR    ww""  kk""  ;;tt  ww    kkkk      kktt  JJ;;  ZZ;;  ;;  tt   
//  JJkkttkkkk;;kkkk;;JJkktt""kkJJJJkkttJJkk;;  kkkkJJ  ttkkttJJkk;;ttkkJJkkJJ   
//| I | - | L | U | N | A | A | T | H | E | N | A | P | R | O | J | E | C | T |  
//------------------------------------------------------------------------------
// iLAthena 스크립트 구문 설명서 <http://www.i-luna.com>
// 한글화 by 아이루나 iLAthena Project
//------------------------------------------------------------------------------
// 파일생성 by 아이루나(사이버짱)
// 기본구조 by 패드릭
//------------------------------------------------------------------------------

이 문서는 iLAthena SVN 의 스크립트 설명을 위해 작성 되었습니다.

//============================================================================//

    ** 기호 설명.
	- ** : 기본 구조에 대하여 설명한다는 표시입니다.
	- * : 부가적으로 설명한다는 표시입니다.
	- <> : 필수 입력란입니다.
	- {} : 생략 가능한 입력란입니다.
	- %TAB% : TAB키 1회를 나타냅니다.

    ** Set a map flag(맵플러그 형식)
	<map name>%TAB%mapflag%TAB%<flag>

    ** Create a permanent monster spawn(몬스터 스크립트 형식)
	<map name>,<x>,<y>,<xs>,<ys>%TAB%monster%TAB%<monster name>%TAB%<mob id>,<amount>,<delay1>,<delay2>,<event>

    ** Npc names /!\ WARNING: this applies to warps, npcs, duplicates and shops /!\ (Npc 이름 형식)
	<Display name>{::<Unique name>}

    ** Define a warp point(워프 스크립트 형식)
	<from map name>,<fromX>,<fromY>,<facing>%TAB%warp%TAB%<warp name>%TAB%<spanx>,<spany>,<to map name>,<toX>,<toY>

    ** Define an NPC object(Npc 스크립트 형식)
	<map name>,<x>,<y>,<facing>%TAB%script%TAB%<NPC Name>%TAB%<sprite id>,{<code>}
	<map name>,<x>,<y>,<facing>%TAB%script%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>,{<code>}

    ** Define a 'floating' NPC object(무형 Npc 스크립트 형식)
	-%TAB%script%TAB%<NPC Name>%TAB%-1,{<code>}

    ** Define a shop/cashshop NPC(상점 스크립트 형식)
	-%TAB%shop%TAB%<NPC Name>%TAB%<sprite id>,<itemid>:<price>{,<itemid>:<price>...}
	<map name>,<x>,<y>,<facing>%TAB%shop%TAB%<NPC Name>%TAB%<sprite id>,<itemid>:<price>{,<itemid>:<price>...}

    ** Define an warp/shop/cashshop/NPC duplicate(복제 스크립트 형식)
	warp: <map name>,<x>,<y>,<facing>%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<spanx>,<spany>
	shop/cashshop/npc: -%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>
	shop/cashshop/npc: <map name>,<x>,<y>,<facing>%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>
	npc: -%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>
	npc: <map name>,<x>,<y>,<facing>%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>

    ** Define a function object(함수 형식)
	function%TAB%script%TAB%<function name>%TAB%{<code>}

    ** RID? GID?(RID와 GID의 의미)

    ** Item and pet scripts(아이템/펫 스크립트에 대해)

    ** Numbers(정수)

    ** Variables(변수)

    ** Strings(문자열)

    ** Arrays(배열)

    ** Operators(연산자)

    ** Labels(라벨)
	<label name>:

	// 시간 관련 이벤트 라벨
	* OnClock<hour><minute>:
	* OnMinute<minute>:
	* OnHour<hour>:
	* On<weekday><hour><minute>:
	* OnDay<month><day>:

	// 서버 관련 이벤트 라벨
	* OnInit:
	* OnInterIfInit:
	* OnInterIfInitOnce:

	// 공성 관련 이벤트 라벨
	* OnAgitStart:
	* OnAgitEnd:
	* OnAgitInit:
	* OnAgitStart2:
	* OnAgitEnd2:
	* OnAgitInit2:

	// Npc 클릭 이벤트 라벨
	* OnTouch:

	// PC 관련 이벤트 라벨
	* OnPCLoginEvent:
	* OnPCLogoutEvent:
	* OnPCBaseLvUpEvent:
	* OnPCJobLvUpEvent:
	* OnPCDieEvent:
	* OnPCKillEvent:

	// Npc 관련 이벤트 라벨
	* OnNPCKillEvent:

	// loadevent 맵플러그 관련 이벤트 라벨
	* OnPCLoadMapEvent:

	// 동작 관련 이벤트 라벨
	* On<label name>:

//============================================================================//

    ** 기호 설명.
	- ** : 기본 구조에 대하여 설명한다는 표시입니다.
	- * : 부가적으로 설명한다는 표시입니다.
	- <> : 안에 든값은 가로로 묶어 사용할수도 있는 값입니다.
	- {} : 안에 든값은 생략 가능한 값입니다.
	- [] : 안에 든값은 그룹 번호로서 서로 관련된 구문을 표시합니다. '현재 그룹 56개'
	- "" : 문자열 보호자입니다. 


    * activatepset <set number>;
	- 


[ 1]* addtimer <ticks>,"NPC::OnEvent";
	- 


[ 1]* addtimercount <ticks>,"NPC::OnEvent";
	- 


[ 2]* addtoskill <skill id>,<level>{,<flag>};
	- flag: 1 = 임시스킬부여(기본값)
		2 = 영구스킬부여


    * adopt "parent name","parent name","novice name";
	- 


[ 3]* agitcheck();
	- Return Values: 1 = 공성중
			 0 = 공성종료

	현재 서버내에서 공성이 진행 중인지를 확인해주는 구문이다. (기존 공성)

	Examples:
		if (agitcheck()) mes "현재 공성이 진행 중입니다.";


[ 3]* agitcheck2();
	- Return Values: 1 = 공성중
			 0 = 공성종료

	현재 서버내에서 공성이 진행 중인지를 확인해주는 구문이다. (SE 공성)

	Examples:
		if (agitcheck2()) mes "현재 공성이 진행 중입니다.";


[ 3]* agitend;
	공성을 종료시키는 구문이다. (기존 공성)


[ 3]* agitend2;
	공성을 종료시키는 구문이다. (SE 공성)


[ 3]* agitstart;
	공성을 시작시키는 구문이다. (기존 공성)


[ 3]* agitstart2;
	공성을 시작시키는 구문이다. (SE 공성)


[29]* announce "Message",<flag>{,<color>};
	- flag: bc_all: Broadcast message is sent server-wide
		bc_map: Message is sent to everyone in the same map
		bc_area: Message is sent to players in the vecinity of the source.
		bc_self: Message is sent only to current player.
		bc_npc: Broadcast source is the npc, not the player attached to the script (useful when a player is not attached or the message should be sent to those nearby the npc)
		(db/const.txt 참조)
	- color: bc_yellow: 노란색으로 출력(기본값)
		 bc_blue: 푸른색으로 출력
		 #RGB code: RGB코드에 따른 색으로 출력


[29]* areaannounce "mapname",<x1>,<y1>,<x2>,<y2>,"Message",<flag>{,<color>};
	- flag: bc_all: Broadcast message is sent server-wide
		bc_map: Message is sent to everyone in the same map
		bc_area: Message is sent to players in the vecinity of the source.
		bc_self: Message is sent only to current player.
		bc_npc: Broadcast source is the npc, not the player attached to the script (useful when a player is not attached or the message should be sent to those nearby the npc)
		(db/const.txt 참조)
	- color: bc_yellow: 노란색으로 출력(기본값)
		 bc_blue: 푸른색으로 출력
		 #RGB code: RGB코드에 따른 색으로 출력


    * areamonster "<map name>",<x1>,<y1>,<x2>,<y2>,"<monster name>",<amount>{,"<event label>"};
	- 


    * areapercentheal ?;
	-


    * areawarp "from_mapname",<x1>,<y1>,<x2>,<y2>,"to_mapname",<x3>,<y3>;
	- 


    * atcommand "Command Line";
	플레이어에 의해 GM권한 99로 해당 명령어를 실행하는 구문이다.

	Examples:
		// 아래는 특정 캐릭터에게 '@자폭' 명령어를 실행하는 예제이다.
		input @player$;
   		atcommand "@자폭 " + @player$;


[ 4]* atoi "string";
	- 


[ 5]* attachnpctimer {"Character Name"};
	- Return Values: 0 = Will return the current tick count of the timer.
			 1 = Will return 1 if there are remaining "OnTimer<ticks>:" labels in the specified NPC waiting for execution.
			 2 = Will return the number of times the timer has triggered an "OnTimer<tick>:" label in the specified NPC.


[ 6]* attachrid <RID>;
	- 


[ 7]* autoequip <item id>,<flag>;
	- flag: 1 = 장비착용 
		0 = 장비착용해제

	플레이어가 획득(loot)한 특정 아이템(장비)을 착용하거나 착용해제하는 구문이다.


[ 8]* awake "NPC Name";
	- 


[ 4]* axtoi "string";
	- 


    * basicskillcheck();
	- 


[56]* bg_destroy ?;
	- 


[56]* bg_get_data ?;
	- 


[56]* bg_getareausers ?;
	- 


[56]* bg_leave ?;
	- 


[56]* bg_monster ?;
	- 


[56]* bg_monster_set_team ?;
	- 


[56]* bg_team_setxy ?;
	- 


[56]* bg_updatescore ?;
	- 


[56]* bg_warp ?;
	- 


[ 9]* bonus <bonus type>,<val1>;
	- bonus type: doc/아이템 보너스 옵션 설명서.txt 참조


[ 9]* bonus2 <bonus type>,<val1>,<val2>;
	- bonus type: doc/아이템 보너스 옵션 설명서.txt 참조


[ 9]* bonus3 <bonus type>,<val1>,<val2>,<val3>;
	- bonus type: doc/아이템 보너스 옵션 설명서.txt 참조


[ 9]* bonus4 <bonus type>,<val1>,<val2>,<val3>,<val4>;
	- bonus type: doc/아이템 보너스 옵션 설명서.txt 참조


[ 9]* bonus5 <bonus type>,<val1>,<val2>,<val3>,<val4>,<val5>;
	- bonus type: doc/아이템 보너스 옵션 설명서.txt 참조


    * bpet;
	- 


    * callfunc "Function"{,"Argument",...,"Argument"};
	- 


    * callshop "Shop Name",<flag>;
	- flag: 0 = 상점 메뉴창(구입,판매,취소)
		1 = 구입 창
		2 = 판매 창


    * callsub "Label"{,"Argument",...,"Argument"};
	- 


    * cardscnt;
	- 


    * changebase <job number>;
	- job number: db/const.txt 참조


    * changelook <type>,<value>;
	- type: 0 = Base sprite(직업 옷)
		1 = Hairstyle(머리 스타일)
		2 = Weapon(무기)
		3 = Head bottom(하단 모자)
		4 = Head top(상단 모자)
		5 = Head mid(중단 모자)
		6 = Hair color(머리 색)
		7 = Clothes color(옷 색)
		8 = Shield(방패)
		9 = Shoes(신발)
	- value: doc/뷰코드 목록표.txt 참조


    * changesex;
	- 


    * charcommand "Command Line";
	- 


    * charisalpha "string",<position>;
	- Return Values: 1 = 문자열
			 0 = 숫자나 공백


[10]* checkcart();
	- Return Values: 1 = 카트있음
			 0 = 카트없음


    * checkcell ("<map name>",<x>,<y>,<type>);
	- type: cell_chkwall/water/cliff - these check directly for the 'terrain component' of the specified cell
		cell_chkpass/reach/nopass/noreach - passable = not wall & not cliff, reachable = passable wrt. no-stacking mod
		cell_chknpc/basilica/landprotector/novending/nochat - these check for specific dynamic flags (their name indicates what they do)
		(db/const.txt 참조)


[11]* checkchatting {"character name"};
	- Return Values: 1 = 채팅방 참여중
			 0 = 채팅방 참여중이 아님


    * checkequipedcard <card id>;
	- 


[12]* checkfalcon();
	- Return Values: 1 = 팔콘있음
			 0 = 팔콘없음


[13]* checkoption <option number>;
	- option number: 0x1     = Sight in effect.
			 0x2     = Hide in effect.
			 0x4     = Cloaking in effect.
			 0x8     = Cart number 1 present.
			 0x10    = Falcon present.
			 0x20    = Peco Peco present.
			 0x40    = GM Perfect Hide in effect.
			 0x80    = Cart number 2 present.
			 0x100   = Cart number 3 present.
			 0x200   = Cart number 4 present.
			 0x400   = Cart number 5 present.
			 0x800   = Orc head present.
			 0x1000  = The character is wearing a wedding sprite.
			 0x2000  = Ruwach is in effect.
			 0x4000  = Chasewalk in effect.
			 0x8000  = Flying or Xmas suit.
			 0x10000 = Sighttrasher.


[13]* checkoption1 <option number>;
	- option number: 1 = Petrified.
			 2 = Frozen.
			 3 = Stunned.
			 4 = Sleeping.
			 6 = Petrifying (the state where you can still walk)


[13]* checkoption2 <option number>;
	- option number: 0x1  = Poisoned.
			 0x2  = Cursed.
			 0x4  = Silenced.
			 0x8  = Signum Crucis (plays a howl-like sound effect, but otherwise no visible effects are displayed)
			 0x10 = Blinded.
			 0x80 = Deadly poisoned.


[14]* checkriding();
	- Return Values: 1 = 페코있음
			 0 = 페코없음


[11]* checkvending {"character name"};
	- Return Values: 1 = 노점 상태임
			 0 = 노점 상태가 아님


    * checkweight "Item name",<amount>;
	- 


    * classchange <view id>,<type>;
	- view id: db/const.txt 참조


[50]* cleararray <array>[ <first value>],<value to set>,<amount>;
	- 


    * clearitem;
	- 


    * clone "<map name>",<x>,<y>,"<event>",<char id>{,<master_id>{,<mode>{,<flag>,<duration>}}};
	- 


    * close;
	- 


    * close2;
	- 


[15]* cmdothernpc "NPCName","Command";
	- 


    * compare "string","substring";
	- 


[50]* copyarray <destination array>[ <first value>],<source array>[ <first value>],<amount of data to copy>;
	- 


    * countitem <item id>; or countitem "item name";
	- 


    * countitem2 <item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>; or countitem2 "item name",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>;
	- identify: 1 = 감정된 상태
		    0 = 감정되지 않은 상태
	- attribute: 1 = 파괴된 상태
		     0 = 파괴되지 않은 상태


    * cutin "filename",<position>;
	- position: 0 = 화면왼쪽 아래 구석
		    1 = 화면중간 아래
		    2 = 화면오른쪽 아래 구석
		    3 = middle of screen in a movable window with an empty title bar.
		    4 = middle of screen without the window header, but still movable.
		    255 = 화면상에 없음(표시된 일러스트를 지움)


[16]* day;
	- 


[17]* deactivatepset <set number>;
	- 


    * debugmes "message";
	- 


[17]* defpattern <set number>,"Regular Expression","Label";
	- 


[53]* deletequest ?;
	- 


[50]* deletearray <array name>[ <first value>],<amount>;
	- 


[17]* deletepset <set number>;
	- 


[47]* deletewaitingroom {"NPC Name"};
	- 


    * delitem <item id>,<amount>; or delitem "Item name",<amount>;
	- 


    * delitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<character ID>}; or delitem2 "<Item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<character ID>};
	- identify: 1 = 감정된 상태
		    0 = 감정되지 않은 상태
	- attribute: 1 = 파괴된 상태
		     0 = 파괴되지 않은 상태


[ 1]* deltimer "NPC::OnEvent";
	- 


[51]* delwall "<name>";
	- 


[ 5]* detachnpctimer {"NPC Name"};
	- 


[ 6]* detachrid;
	- 


[15]* disablearena;
	- 


[18]* disablenpc "npcname";
	- 


[19]* disablewaitingroomevent {"NPC Name"};
	- 


[20]* disable_items;
	- 


[21]* disguise <disguise id>;
	- 


    * dispbottom "message";
	- 


    * distance <x1>,<y1>,<x2>,<y2>;
	- 


    * divorce;
	- 


    * doevent "NPC Name::OnEventlabel";
	- 


    * donpcevent "NpcName::OnEventlabel";
	- 


    * eaclass <job number>;
	- job number: db/const.txt 참조


    * emotion <emotion>{,<target>};
	- emotion: http://i-luna.com/emotion/ 참조
	- target: 0 = Npc가 이모션을 사용(기본값)
		  1 = Player가 이모션을 사용


[15]* enablearena;
	- 


[18]* enablenpc "npcname";
	- 


[19]* enablewaitingroomevent {"NPC Name"};
	- 


[20]* enable_items;
	- 


    * end;
	- 


[ 7]* equip <item id>;
	- 


[43]* failedrefitem <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


[44]* failedremovecards <slot>,<option>;
	- option: 0 = 장비와 카드 모두 소멸
		  1 = 카드만 소멸
		  2 = 장비만 소멸


    * fakecasting ?;
	-


    * flagemblem <guild id>;
	- 


    * function <function name>; or <function name>; or function <function name> { <code> }
	- 


    * getareadropitem "mapname",<x1>,<y1>,<x2>,<y2>,<item id>;
	- 


    * getareausers "mapname",<x1>,<y1>,<x2>,<y2>;
	- 


    * getarg <number>{,<Default Value>};
	- 


    * getarraysize <array>;
	- 


[22]* getbattleflag "battle flag";
	- 


    * getbrokenid <number>;
	- 


[23]* getcastledata("<map name>",<type of data>)
	- type: 0 = Will make the map server request the castle data from the char server, and always return 0. This, apparently, will also cause indirectly the execution of an 'OnAgitInit:' event mentioned at the beginning of this document.
		1 = Guild ID
		2 = Castle Economy score.
		3 = Castle Defence score.
		4 = Number of times the economy was invested in today.
		5 = Number of times the defence was invested in today.
		9 = Will return 1 if a Kafra was hired for this castle, 0 otherwise.
		10 = Is 1 if the 1st guardian is present (Soldier Guardian)
		11 = Is 1 if the 2nd guardian is present (Soldier Guardian)
		12 = Is 1 if the 3rd guardian is present (Soldier Guardian)
		13 = Is 1 if the 4th guardian is present (Archer Guardian)
		14 = Is 1 if the 5th guardian is present (Archer Guardian)
		15 = Is 1 if the 6th guardian is present (Knight Guardian)
		16 = Is 1 if the 7th guardian is present (Knight Guardian)
		17 = Is 1 if the 8th guardian is present (Knight Guardian)


    * getcastlename "mapname";
	- mapname: db/castle_db.txt 참조


    * getcharid <type>{,"character name"};
	- type: 0 = Character ID number.
		1 = Party ID number.
		2 = Guild ID number.
		3 = Account ID number.


[24]* getchildid;
	- 


    * getd "Variable Name";
	- 


    * getelementofarray <array>,<index>;
	- 


    * getequipcardcnt <slot>;
	- 


    * getequipcardid <equipment slot>,<card slot>;
	- equipment slot: 1 = Upper head gear
			  2 = Armor (Where you keep your Jackets and Robes)
			  3 = What is in your Left hand.
			  4 = What is in your Right hand.
			  5 = The garment slot (Mufflers, Hoods, Manteaus)
			  6 = What foot gear the player has on.
			  7 = Accessory 1.
			  8 = Accessory 2.
			  9 = Middle Headgear (masks and glasses)
			  10 = Lower Headgear (beards, some masks)


    * getequipid <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


    * getequipisenableref <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


    * getequipisequiped <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


    * getequipisidentify <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


    * getequipname <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


    * getequippercentrefinery <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


    * getequiprefinerycnt <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


    * getequipweaponlv <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


    * getexp <base exp>,<job exp>;
	- 


[24]* getfatherid;
	- 


    * getgdskilllv <guild id>,<skill id>;
	- 


    * getgmlevel();
	- 


    * getguildmaster <guild id>;
	- 


    * getguildmasterid <guild id>;
	- 


    * getguildname <guild id>;
	- 


    * gethominfo(<type>);
	- type: 0 = Homunculus unique ID
		1 = Homunculus Class
		2 = Name
		3 = Friendly level (intimacy score). 100000 is full loyalty.
		4 = Hungry level. 100 is completely full.
		5 = Rename flag. 0 means this homunculus has not been named yet.
		6 = Homunculus level


    * getinventorylist;
	- Return Values: @inventorylist_id[]        - array of item ids.
	 		 @inventorylist_amount[]    - their corresponding item amounts.
			 @inventorylist_equip[]     - whether the item is equipped or not.
			 @inventorylist_refine[]    - for how much it is refined.
			 @inventorylist_identify[]  - whether it is identified.
			 @inventorylist_attribute[] - whether it is broken.
			 @inventorylist_card1[]     - These four arrays contain card data for the items.
			 @inventorylist_card2[]       These data slots are also used to store names
			 @inventorylist_card3[]       inscribed on the items, so you can explicitly check
			 @inventorylist_card4[]       if the character owns an item made by a specific craftsman.
			 @inventorylist_count       - the number of items in these lists.


    * getitem <itemid>,<amount>{,<account ID>}; or getitem "itemname",<amount>{,<accountID>};
	- 


    * getitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<character ID>}; or getitem2 "itemname",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<character ID>};
	- identify: 1 = 감정된 상태
		    0 = 감정되지 않은 상태
	- attribute: 1 = 파괴된 상태
		     0 = 파괴되지 않은 상태


    * getiteminfo <item id>,<type>;
	- type: 0 = Buy Price
		1 = Sell Price
		2 = Item Type
		3 = maxchance (Max drop chance of this item e.g. 1 = 0.01% , etc.. if = 0, then monsters don't drop it at all (rare or a quest item) if = 10000, then this item is sold in NPC shops only
		4 = sex
		5 = equip
		6 = weight
		7 = atk
		8 = def
		9 = range
		10 = slot
		11 = look
		12 = elv
		13 = wlv


    * getitemname <item id>;
	- 


    * getitemslots <item id>;
	- 


    * getlook <type>;
	- type: 0 = Base sprite(직업 옷)
		1 = Hairstyle(머리 스타일)
		2 = Weapon(무기)
		3 = Head bottom(하단 모자)
		4 = Head top(상단 모자)
		5 = Head mid(중단 모자)
		6 = Hair color(머리 색)
		7 = Clothes color(옷 색)
		8 = Shield(방패)
		9 = Shoes(신발)


    * getmapguildusers "mapname",<guild id>;
	- 


    * getmapmobs "mapname";
	- 


    * getmapusers "mapname";
	- 


    * getmapxy <variable for map name>,<variable for x>,<variable for y>,<type>{,"Search String"};
	- type: 0 = Character object
		1 = NPC object
		2 = Pet object
		3 = Monster object.


    * getmonsterinfo <Mob ID>,<Type>;
	- type: MOB_NAME	0		MOB_LV		1
		MOB_MAXHP	2		MOB_BASEEXP	3
		MOB_JOBEXP	4		MOB_ATK1	5
		MOB_ATK2	6		MOB_DEF		7
		MOB_MDEF	8		MOB_STR		9
		MOB_AGI		10		MOB_VIT		11
		MOB_INT		12		JOB_DEX		13
		MOB_LUK		14		MOB_RANGE	15
		MOB_RANGE2	16		MOB_RANGE3	17
		MOB_SIZE	18		MOB_RACE	19
		MOB_ELEMENT	20		MOB_MODE	21


[24]* getmotherid;
	- 


    * getnameditem <item id>,"Name to inscribe"; or getnameditem "Item name","Name to inscribe"; or getnameditem "Item name",<Character ID>; or getnameditem <item id>,<Character ID>;
	- 


[ 5]* getnpctimer <type>;
	- type: 0 = Will return the current tick count of the timer.
		1 = Will return 1 if there are remaining "OnTimer<ticks>:" labels in the specified NPC waiting for execution.
		2 = Will return the number of times the timer has triggered an "OnTimer<tick>:" label in the specified NPC.


    * getpartnerid();
	- 


    * getpartyleader <party id>{,<type>};
	- type: 1 = Leader account id
		2 = Leader character id
		3 = Leader's class
		4 = Leader's current map name
		5 = Leader's current level as stored on the party structure (may not be current level if leader leveled up recently).


    * getpartymember <party id>{,<type>};
	- type: 0 = $@partymembername$[] is a global temporary stringarray which contains all the names of these party members.
		1 = $@partymembercid[] is a global temporary number array which contains the character id of these party members.
		2 = $@partymemberaid[] is a global temporary number array which contains the account id of these party members.
	- Return Values: $@partymembercount is the number of party members that were found.


    * getpartyname <party id>;
	- 


    * getpetinfo <type>;
	- type: 0 = Unique pet ID number as stored by the char server and distinguishing it from all other pets the characters actually have. This value is currently useless, at most you can use it to tell pets apart reliably.
		1 = Pet ID number as per 'db/pet_db.txt' - will tell you what kind of a pet it is.
		2 = Pet name. Will return "null" if there's no pet. 
		3 = Pet friendly level (intimacy score). 1000 is full loyalty.
		4 = Pet hungry level. 100 is completely full.


    * getrefine();
	- 


    * getsavepoint <type>;
	- type: 0 = Map name (a string)
		1 = X coordinate
		2 = Y coordinate


    * getscrate <effect type>,<base rate>{,<target id>};
	- 


    * getskillist;
	- Return Values: @skilllist_id[] - skill ids.
			 @skilllist_lv[] - skill levels.
			 @skilllist_flag[] - see 'skill' for the meaning of skill flags.
			 @skilllist_count - number of skills in the above arrays.


    * getskilllv <skill id>;
	- 


    * getstrlen "String";
	- 


    * gettime <type>;
	- type: 1 = Seconds (of a minute)
		2 = Minutes (of an hour)
		3 = Hour (of a day)
		4 = Week day (0 for Sunday, 6 is Saturday)
		5 = Day of the month.
		6 = Number of the month.
		7 = Year.
		8 = Day of the year.


    * gettimestr <format>,<max length>;
	- format: http://www.delorie.com/gnu/docs/glibc/libc_437.html 참조


    * gettimetick <type>;
	- 


[53]* getquest ?;
	- 


    * getusers <type>;
	- type: Type is a bitmask, add up to get the effects you want:
		8 = This will count all characters on the same map as the current NPC. (By default, it will count people on the same map as the character)
		7 = Return the amount of players for the entire server.(By default, only the players on the map will be counted.)


    * getusersname;
	- 


    * getvariableofnpc <Variable Name>,"NPC Name";
	- 


[47]* getwaitingroomstate <info type>{,"NPC Name"};
	- info type: 0 = Number of users currently chatting.
		     1 = Maximum number of users allowed.
	     	     2 = Will return 1 if the waiting room has a trigger set. 0 otherwise.
	     	     3 = Will return 1 if the waiting room is currently disabled. 0 otherwise.
	     	     4 = The Title of the waiting room (string)
	     	     5 = Password of the waiting room, if any. Pointless, since there is no way to set a password on a waiting room right now.
	     	     16 = Event name of the waiting room (string)
	     	     32 = Whether or not the waiting room is full.
	     	     33 = Whether the amount of users in the waiting room is higher than the trigger number.


    * globalmes "Message"{,"NPC Name"};
	- 


    * goto "Label";
	- 


    * groupranditem <group id>;
	- group id = db/item_group_db.txt 참조


    * guardian "<map name>",<x>,<y>,"<name to show>",<mob id>,<amount>{,"<event label>"}{,<guardian index>};
	- 


    * guardianinfo <slot>;
	- slot: 0 = visibility (whether the guardian is installed or not)
		1 = max. hp
		2 = current hp


    * guildchangegm <guild id>,"New guild master name";
	- 


    * guildgetexp <amount>;
	- 


    * guildopenstorage;
	- 


    * guildskill <skill id>,<level>;
	- 


[25]* gvgoff "mapname";
	- 


[25]* gvgon "mapname";
	- 


    * hasitems;
	- 


[53]* hasquest ?;
	- 


    * heal <hp>,<sp>;
	- 


[26]* hideoffnpc "Npc name";
	- 


[26]* hideonnpc "Npc name";
	- 


    * homunculus_evolution;
	- 


    * homunculus_shuffle;
	- 


    * if (<condition>) <statement>
	- 


[ 5]* initnpctimer { [  "NPC Name" {, <Attach Flag>} || "NPC Name" || <Attach Flag> ]};
	- Attach Flag: 0 = Will return the current tick count of the timer.
		       1 = Will return 1 if there are remaining "OnTimer<ticks>:" labels in the specified NPC waiting for execution.
		       2 = Will return the number of times the timer has triggered an "OnTimer<tick>:" label in the specified NPC.


[15]* inittimer;
	- 


    * input(<variable>{,<min>{,<max>}});
	- 


[27]* isday();
	- 


    * isequiped <id>{,<id>,...,<id>};
	- 


    * isequipedcnt <id>,{<id>,...,<id>};
	- 


    * isloggedin <account id>;
	- 


[27]* isnight();
	- 


    * ispartneron();
	- 


    * itemheal <hp>,<sp>;
	- 


    * itemskill <skill id>,<skill level>;
	- 


    * jobchange <job number>{,<upper flag>};
	- job number: db/const.txt 참조
	- upper flag: 0 = 비전승
		      1 = 전승
		      2 = 베이비
		      3 = 3차 직업


    * jobname <job number>;
	- job number: db/const.txt 참조


    * jump_zero (<condition>),<label>;
	- 


[28]* killmonster "mapname","event label";
	- 


[28]* killmonsterall "mapname";
	- 


    * logmes "message";
	- 


    * makeitem <item id>,<amount>,"mapname",<x>,<y>; or makeitem "item name",<amount>,"mapname",<x>,<y>;
	- 


    * makepet <pet id>;
	- 


[29]* mapannounce "mapname","message",<flag>{,<color>};
	- flag: bc_all: Broadcast message is sent server-wide
		bc_map: Message is sent to everyone in the same map
		bc_area: Message is sent to players in the vecinity of the source.
		bc_self: Message is sent only to current player.
		bc_npc: Broadcast source is the npc, not the player attached to the script (useful when a player is not attached or the message should be sent to those nearby the npc)
		(db/const.txt 참조)
	- color: bc_yellow: The default is to send broadcasts in yellow color.
		 bc_blue: Alternate broadcast is displayed in blue color.
		 #RGB code


    * maprespawnguild "mapname",<guild id>,<flag>;
	- flag: 1 = warp all guild members to their savepoints.
		2 = warp all non-guild members to their savepoints.
		4 = remove all monsters which are not guardian or emperium.


    * mapwarp "frommap","tomap",<x>,<y>;
	- 


    * marriage <spouse name>;
	- 


    * menu "<menu option>",<label>{,"<menu option>",<label>,...};
	- 


    * mes "String";
	- 


    * message "character name","message";
	- 


[52]* mercenary_create ?;
	- 


[52]* mercenary_heal ?;
	- 


[52]* mercenary_sc_start ?;
	- 


[52]* mercenary_get_calls ?;
	- 


[52]* mercenary_get_faith ?;
	- 


[52]* mercenary_set_calls ?;
	- 


[52]* mercenary_set_faith ?;
	- 


    * misceffect <effect number>;
	- doc/이펙트 목록표.txt 참조


    * mobassist <GID>,<Target ID>;
	- 


    * mobattach <GID>{,"NPC Name"};
	- 


    * mobcount "mapname","event label";
	- 


[30]* mobremove <GID>;
	- 


[30]* mobspawn "monster name",<monster ID>,"mapname",<x>,<y>;
	- 


    * monster "<map name>",<x>,<y>,"<name to show>",<mob id>,<amount>{,"<event label>"};
	- 


    * movenpc "NPC Name",<x>,<y>;
	- 


    * next;
	- 


[16]* night;
	- 


    * npcshopadditem "<name>",<item id>,<price>{,<item id>,<price>{,<item id>,<price>{,...}}};
	- 


    * npcshopattach "Shop name"{,<flag>};
	- 


    * npcshopdelitem "<name>",<item id>{,<item id>{,<item id>{,...}}};
	- 


    * npcshopitem "<name>",<item id>,<price>{,<item id>,<price>{,<item id>,<price>{,...}}};
	- 


    * npcskilleffect <skill id>,<number>,<x>,<y>;
	- 


[31]* npcspeed <speed>;
	- speed: 0~1000


[31]* npcstop;
	- 


    * npctalk "Message";
	- 


    * npcwhisper "character name","message";
	-


[31]* npcwalkto <x>,<y>;
	- 


    * nude;
	- 


    * openauction;
	- 


[54]* openmail;
	- 


    * openstorage;
	- 


    * pcblockmove <id>,<option>;
	- 


[32]* pcfollow <id>,<target id>;
	- 


[32]* pcstopfollow <id>;
	- 


    * percentheal <%hp>,<%sp>;
	- 


    * pet <pet id>;
	- 


[33]* petheal <level>,<delay>,<percent hp>,<percent sp>;
	- 


    * petloot <max items>;
	- 


    * petrecovery <status type>,<delay>;
	- status type: db/const.txt 참조


[34]* petskillattack <skill id>,<skill level>,<rate>,<bonusrate>;
	- 


[34]* petskillattack2 <skill id>,<damage>,<number of attacks>,<rate>,<bonusrate>;
	- 


    * petskillbonus <bonus type>,<value>,<duration>,<delay>;
	- bonus type: bonus 구문 참조


[33]* petskillsupport <skill id>,<skill level>,<delay>,<percent hp>,<percent sp>;
	- 


    * petstat <flag>;
	- flag: PET_CLASS
		PET_NAME
		PET_LEVEL
		PET_HUNGRY
		PET_INTIMATE


    * playerattached();
	- Return Values: When there is no one attached to the script: 0
			 When there is someone attached to the script: the attached person's Account ID


    * pow <number>,<power>;
	- 


    * produce <item level>;
	- item level: 1 = Level 1 Weapons
		      2 = Level 2 Weapons
		      3 = Level 3 Weapons
		      16 = Blacksmith's Stones and Metals
		      32 = Alchemist's Potions
		      64 = Whitesmith's Coins
		      123 = Whitesmith's Nuggets
		      256 = Assassin Cross's Deadly Poison


[35]* prompt "Option"{,"Option",...,"Option"};
	- 


[36]* pvpoff "mapname";
	- 


[36]* pvpon "mapname";
	- 


    * escape_sql "Query"{,<array>{,<array>{,...}}};
	- 


[37]* query_sql "Query"{,<array>{,<array>{,...}}};
	- 


[37]* query_logsql "your MySQL query", <array variable> {,<array variable>, ...};
	- 


    * readbook <book id>,<page>;
	- 


    * rand <number>{,<number>};
	- 


    * readparam <number>;
	- number: db/const.txt 참조


    * recovery;
	- 


    * removemapflag "mapname",<flag>;
	- 


    * repair <broken id number>;
	- 


    * requestguildinfo <guild id>,"event label";
	- 


    * resetlvl <type>;
	- type: 1 = Base level 1, Job level 1, 0 skill points, 0 base xp, 0 job xp, wipes the status effects, sets all stats to 1. If the new job is 'Novice High', give 100 status points, give First Aid and Play Dead skills.
		2 = Base level 1, Job level 1, 0 skill points, 0 XP/JXP. Skills and attribute values are not altered.
		3 = Base level 1, base xp 0. Nothing else is changed.
		4 = Job level 1, job xp 0. Nothing else is changed.


    * resetskill;
	- 


    * resetstatus;
	- 


    * return {<value>};
	- 


    * rid2name <RID>;
	- 


    * roclass <job number>{,<gender>};
	- job number: db/const.txt 참조


[38]* save "mapname",<x>,<y>;
	- 


[38]* savepoint "mapname",<x>,<y>;
	- 


[39]* sc_end <effect type>{,<target ID number>};
	- 


[39]* sc_start <effect type>,<ticks>,<extra argument>{,<target ID number>};
	- 


[39]* sc_start2 <effect type>,<ticks>,<extra argument>,<percent chance>{,<target ID number>};
	- 


[39]* sc_start4 <effect type>,<ticks>,<value 1>,<value 2>,<value 3>,<value 4>{,<target ID number>};
	- 


[35]* select "Option"{,"Option",...,"Option"};
	- 


    * set <variable>,<value>;
	- 


[50]* setarray <array name>[ <first value>],<value>{,<value>,...,<value>};
	- 


[22]* setbattleflag "battle flag",<value>;
	- 


[10]* setcart {<type>};
	- type: 1 = 카트장착
		0 = 카트해제


[23]* setcastledata "mapname",<type>,<value>;
	- type: 0 = Will make the map server request the castle data from the char server, and always return 0. This, apparently, will also cause indirectly the execution of an 'OnAgitInit:' event mentioned at the beginning of this document.
		1 = Guild ID
		2 = Castle Economy score.
		3 = Castle Defence score.
		4 = Number of times the economy was invested in today.
		5 = Number of times the defence was invested in today.
		9 = Will return 1 if a Kafra was hired for this castle, 0 otherwise.
		10 = Is 1 if the 1st guardian is present (Soldier Guardian)
		11 = Is 1 if the 2nd guardian is present (Soldier Guardian)
		12 = Is 1 if the 3rd guardian is present (Soldier Guardian)
		13 = Is 1 if the 4th guardian is present (Archer Guardian)
		14 = Is 1 if the 5th guardian is present (Archer Guardian)
		15 = Is 1 if the 6th guardian is present (Knight Guardian)
		16 = Is 1 if the 7th guardian is present (Knight Guardian)
		17 = Is 1 if the 8th guardian is present (Knight Guardian)


    * setcell "<map name>",<x1>,<y1>,<x2>,<y2>,<type>,<flag>;
	- type: cell_chkwall/water/cliff - these check directly for the 'terrain component' of the specified cell
		cell_chkpass/reach/nopass/noreach - passable = not wall & not cliff, reachable = passable wrt. no-stacking mod
		cell_chknpc/basilica/landprotector/novending/nochat - these check for specific dynamic flags (their name indicates what they do)
		(db/const.txt 참조)
	- flag: 1 = 적용
		0 = 해제


    * setd "variable name",<value>;
	- 


[12]* setfalcon {<flag>};
	- flag: 1 = 착용
		0 = 해제


    * setiteminfo <item id>,<type>,<value>;
	- type: 0 value_buy;
		1 value_sell;
		2 type;
		3 maxchance = Max drop chance of this item e.g. 1 = 0.01% , etc..
			if = 0, then monsters don't drop it at all (rare or a quest item)
			if = 10000, then this item is sold in NPC shops only
		4 sex;
		5 equip;
		6 weight;
		7 atk;
		8 def;
		9 range;
		10 slot;
		11 look;
		12 elv;
		13 wlv;
		14 view id


    * setitemscript <item id>,"{ new script }";
	- 


    * setlook <type>,<value>;
	- type: 0 = Base sprite(직업 옷)
		1 = Hairstyle(머리 스타일)
		2 = Weapon(무기)
		3 = Head bottom(하단 모자)
		4 = Head top(상단 모자)
		5 = Head mid(중단 모자)
		6 = Hair color(머리 색)
		7 = Clothes color(옷 색)
		8 = Shield(방패)
		9 = Shoes(신발)
	- value: doc/뷰코드 목록표.txt 참조


    * setmapflag "mapname",<flag>;
	- flag: db/const.txt 참조 ('mf_')


    * setmapflagnosave "mapname","second_mapname",<x>,<y>;
	- 


    * setmobdata <GID>,<type>,<value>;
	- type: 0 = class (big, small, normal)
		1 = level
		2 = HP
		3 = max HP
		4 = master ID (aid of the master, summon)
		5 = map index   26 = no random walk (1 or 0)
		6 = x  (Monster ID, Job ID)
		7 = y
		8 = speed
		9 = mode (doc/mob_db_mode_list.txt 참조)
		10 = special AI state (?)
		11 = SC option
		12 = sex
		13 = class
		14 = hair style
		15 = hair color
		16 = head gear bottom
		17 = head gear middle
		18 = head gear top
		19 = cloth color
		20 = shield
		21 = weapon
		22 = shield (again)
		23 = looking dir
		24 = killer state (1 or 0)
		25 = callback flag


    * setnpcdisplay("<npc name>", "<display name>", <class id>) or setnpcdisplay("<npc name>", "<display name>") or setnpcdisplay("<npc name>", <class id>)
	- Return Values: If executed successful: 0
			 If the NPC specified does not exist: 1


[ 5]* setnpctimer <tick>{,"NPC Name"};
	- 


[13]* setoption <option number>{,<flag>};
	- flag: if flag is 1 (default when omitted), the option will be added to what the character currently has; if 0, the option is removed. 


[53]* setquestobjective ?;
	- 


[53]* setqueststatus ?;
	- 


[14]* setriding {<flag>};
	- flag: 1 = 착용
		0 = 해제


[51]* setwall "<map name>",<x>,<y>,<size>,<dir>,<shootable>,"<name>";
	- 


[ 2]* skill <skill id>,<level>{,<flag>};
	- flag: 1 = 임시스킬부여(기본값)
		2 = 영구스킬부여


    * skilleffect <skill id>,<number>;
	- 


    * skillpointcount;
	- 


[ 8]* sleep <milliseconds>;
	- 


[ 8]* sleep2 <milliseconds>;
	- 


[40]* soundeffect "effect filename",<number>;
	- effect filename: http://www.i-luna.com/bbs/view.php?id=Guide&page=2&sn1=&divpage=1&sn=off&ss=on&sc=on&select_arrange=headnum&desc=asc&no=476 참조


[40]* soundeffectall "effect filename",<number>{,<coverage>{,"mapname",<x0>,<y0>,<x1>,<y2>}};
	- effect filename: http://www.i-luna.com/bbs/view.php?id=Guide&page=2&sn1=&divpage=1&sn=off&ss=on&sc=on&select_arrange=headnum&desc=asc&no=476 참조


[41]* specialeffect <effect number>;
	- doc/이펙트 목록표.txt 참조


[41]* specialeffect2 <effect number>;
	- doc/이펙트 목록표.txt 참조


    * sqrt <number>;
	- 


[ 5]* startnpctimer { [  "NPC Name" {, <Attach Flag>} || "NPC Name" || <Attach Flag> ]};
	- Attach Flag: 0 = Will return the current tick count of the timer.
		       1 = Will return 1 if there are remaining "OnTimer<ticks>:" labels in the specified NPC waiting for execution.
		       2 = Will return the number of times the timer has triggered an "OnTimer<tick>:" label in the specified NPC.


[42]* statusup <stat>;
	- stat: bStr - Strength
		bVit - Vitality
		bInt - Intelligence
		bAgi - Agility
		bDex - Dexterity
		bLuk - Luck


[42]* statusup2 <stat>,<amount>;
	- stat: bStr - Strength
		bVit - Vitality
		bInt - Intelligence
		bAgi - Agility
		bDex - Dexterity
		bLuk - Luck


[ 5]* stopnpctimer { [  "NPC Name" {, <Detach Flag>} || "NPC Name" || <Detach Flag> ]};
	- Attach Flag: 0 = Will return the current tick count of the timer.
		       1 = Will return 1 if there are remaining "OnTimer<ticks>:" labels in the specified NPC waiting for execution.
		       2 = Will return the number of times the timer has triggered an "OnTimer<tick>:" label in the specified NPC.


[15]* stoptimer;
	- 


    * strcharinfo <type>;
	- type: 0 = Character's name.
		1 = The name of the party they're in if any.
		2 = The name of the guild they're in if any.


    * strmobinfo <type>,<mob id>;
	- type: 1 = 'english name' field in the database, a string.
		2 = 'japanese name' field in the database, a string. All other returned values are numbers:
		3 = Level.
		4 = Maximum HP.
		5 = Maximum SP.
		6 = Experience reward.
		7 = Job experience reward.


    * strnpcinfo(<type>);
	- type: 0 = The NPC's display name (visible#hidden)
		1 = The visible part of the NPC's display name
		2 = The hidden part of the NPC's display name
		3 = The NPC's unique name (::name)


[43]* successrefitem <slot>;
	- slot: 1 = Upper head gear
		2 = Armor (Where you keep your Jackets and Robes)
		3 = What is in your Left hand.
		4 = What is in your Right hand.
		5 = The garment slot (Mufflers, Hoods, Manteaus)
		6 = What foot gear the player has on.
		7 = Accessory 1.
		8 = Accessory 2.
		9 = Middle Headgear (masks and glasses)
		10 = Lower Headgear (beards, some masks)


[44]* successremovecard <equipment slot>;
	- equipment slot: 1 = Upper head gear
			  2 = Armor (Where you keep your Jackets and Robes)
			  3 = What is in your Left hand.
			  4 = What is in your Right hand.
			  5 = The garment slot (Mufflers, Hoods, Manteaus)
			  6 = What foot gear the player has on.
			  7 = Accessory 1.
			  8 = Accessory 2.
			  9 = Middle Headgear (masks and glasses)
			  10 = Lower Headgear (beards, some masks)


    * summon "Monster name",<monster id>{,<Time Out>{,"event label"}};
	- 


[21]* undisguise;
	- 


[ 7]* unequip <equipment slot>;
	- equipment slot: 1 = Upper head gear
			  2 = Armor (Where you keep your Jackets and Robes)
			  3 = What is in your Left hand.
			  4 = What is in your Right hand.
			  5 = The garment slot (Mufflers, Hoods, Manteaus)
			  6 = What foot gear the player has on.
			  7 = Accessory 1.
			  8 = Accessory 2.
			  9 = Middle Headgear (masks and glasses)
			  10 = Lower Headgear (beards, some masks)


    * unitattack <GID>,<Target ID>;
	- 


    * unitemote <GID>,<Emote>;
	- 


    * unittalk <GID>,<Text>;
	- 


    * unitkill <GID>;
	- 


[45]* unitskilluseid <GID>,<skill id>,<skill lvl>{,<target id>}; or unitskilluseid <GID>,"<skill name>",<skill lvl>{,<target id>};
	- 


[45]* unitskillusepos <GID>,<skill id>,<skill lvl>,<x>,<y>; or unitskillusepos <GID>,"<skill name>",<skill lvl>,<x>,<y>;
	- 


[46]* unitstop <GID>;
	- 


[46]* unitwalk <GID>,<x>,<y>; or unitwalk <GID>,<mapid>;
	- 


    * unitwarp <GID>,<Mapname>,<x>,<y>;
	- 


    * viewpoint <action>,<x>,<y>,<point number>,<color>;
	- 


[55]* waitingroom2bg ?;
	-


[55]* waitingroom2bg_single ?;
	-


[47]* waitingroom "<chatroom name>",<limit>{,<event label>,<trigger>};
	- 


[47]* waitingroomkickall {"<NPC object name>"};
	- 


[48]* warp "<map name>",<x>,<y>;
	- 


[48]* warpchar "<mapname>",<x>,<y>,<char_id>;
	- 


[48]* warpguild "<mapname>",<x>,<y>,<guild_id>;
	- 


[48]* warppartner("<map name>",<x>,<y>);
	- 


[48]* warpparty "<mapname>",<x>,<y>,<party_id>;
	- 


[48]* warpportal <x>,<y>,"<mapname>",<x>,<y>;
	- 


[48]* warpwaitingpc "<map name>",<x>,<y>{,<number of people>};
	- 


[49]* wedding;
	- 


[49]* wedding_effect;
	- 


[54]* writemail ?;
	-

*instance_create("<Instance Name>",<Party ID>,<Instance>)

<Party ID>를 가진 파티를 위한 "<Instance Name>"의 인스턴스를 만듭니다.
Instance ID는 현재 ID_ENDLESS (5) 또는 ID_CATACOMBS (6) 만 작동합니다.
대부분의 Instance_* 명령어는 이 명령어와 이 명령어에 의해 리턴되는 ID와 함께 사용됩니다.


예제:
 // 캐릭터로부터 Party ID를 불러와 저장한다.
 set .@party_id, getcharid(1);
 // 받아온 party ID를 사용해 인스턴스 생성을 시도한다.
 set .@id, instance_create("Endless Tower", .@party_id, ID_ENDLESS);
 if (.@id == -1) { // Party ID가 이미 다른 인스턴스에 사용되었다.
 }
 else (.@id < 0) { // 대기중의 명시되지 않은 에러
 }
---------------------------------------

*instance_destroy(<Instance ID>)

<Instance ID>의 아이디를 가진 인스턴스를 제거합니다.

---------------------------------------

*instance_attachmap(<Instance ID>,"<Map Name>")
*instance_detachmap(<Instance ID>,"<Map Name>")

<Instance ID>를 가지고 있는 인스턴스 맵에 접근(Attach) 혹은 분리(Detach) 합니다.


---------------------------------------

*instance_init(<Instance ID>);

<Instance ID>를 가진 인스턴스를 시작합니다.

---------------------------------------

*instance_announce <Instance ID>,"<text>",<flag>{,<color>};

announce와 비슷하게 작동합니다만, <Instance ID>인자를 가지고 있습니다.
<Instance ID>가 0인 경우에 활성화된 인스턴스 전체를 대상으로 합니다.

---------------------------------------

*instance_attach(<Instance ID>);

<Instance ID>의 범위에 있는 스트립트에 접근합니다.

---------------------------------------

*instance_npcname("<NPC Name>",<Instance ID>)

인스턴스를 위해서 복사된 NPC들의 유니크 네임을 검색합니다.
enablenpc와 disablenpc, donpcevent등의 명령어를 사용할 수 있게 합니다.

---------------------------------------

*has_instance("<Map Name>")

플레이어가 <Map Name>인스턴스의 대기열에 들어있는지 체크합니다.

---------------------------------------

*instance_id(<?>)

플레이어가 접근되어있는 인스턴스의 ID를 리턴합니다.

---------------------------------------

*instance_warpall "<Map Name>",<x>,<y>;

인스턴스 내의 모든 플레이어를 <map name>의 주어진 좌표로 워프합니다.

---------------------------------------

*instance_set_timeout <Time1>,<Time2>,<Instance ID>;

<Time1>은 <Instance ID>의 수명(활성화 시간)을, <Time2>는 얼마동안 인스턴스가 비활성화 되어있을지 설정합니다.

---------------------------------------

*setquest <ID>;

유저의 퀘스트 로그에 <ID>의 퀘스트를 생성합니다.
퀘스트의 현재 상태는 "진행중"입니다.

---------------------------------------

*completequest <ID>;

주어진 <ID> 퀘스트의 상태를 "완료"로 바꾸고 유저의 퀘스트 로그로부터 제거합니다.

---------------------------------------

*erasequest <ID>;

주어진 <ID>퀘스트를 유저의 퀘스트 로그로부터 제거합니다.

---------------------------------------

*changequest <ID>,<ID2>;

주어진 <ID>의 퀘스트를 "완료"상태로 바꾸고 퀘스트 로그로부터 삭제합니다.
<ID2>의 퀘스트를 퀘스트 로그에 추가하고 그 상태를 "진행중"으로 설정합니다.

---------------------------------------

checkquest(<ID>{,PLAYTIME|HUNTING});

만약 추가적으로 주어진 인자가 없다면 퀘스트에 대한 상태를 다음과 같이 리턴합니다.
 -1 = 퀘스트가 시작되지 않음 (퀘스트 로그에도 존재하지 않음)
 0  = 퀘스트가 주어졌지만, 상태가 "진행중이 아님"임
 1  = 퀘스트가 주어졌고, 상태가 "진행중"임
 2  = 퀘스트가 완료됨
 
만약 인자로 "PLAYTIME"가 주어진다면 다음과 같이 리턴합니다.
 -1 = 퀘스트가 시작되지 않음 (퀘스트 로그에도 존재하지 않음)
 0  = 아직 시간 제한에 도달하지 않음
 1  = 아직 시간 제한에 도달하지 않았지만 퀘스트는 완료된 것으로 표기됨
 2  = 시간제한에 도달했음
 
만약 인자로 "HUNTING"이 주어진다면 다음과 같이 리턴합니다.
 -1 = 퀘스트가 시작되지 않음 (퀘스트 로그에도 존재하지 않음)
 0  = 아직 대상 몬스터를 다 처치하지 못했고, 시간 제한에도 도달하지 않았음.
 1  = 아직 대상 몬스터를 다 처치하지 못했지만, 시간 제한에 도달하였음.
 2  = 모든 대상 몬스터를 처치하였음
